/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultinateInterface extends utils.Interface {
  functions: {
    "FINANCIAL_STATEMENTS_KEY()": FunctionFragment;
    "MISSION_STATEMENT_KEY()": FunctionFragment;
    "REGISTRATION_KEY()": FunctionFragment;
    "TAX_EXEMPT_STATUS_KEY()": FunctionFragment;
    "attestationStation()": FunctionFragment;
    "campaigns(uint256)": FunctionFragment;
    "charityScores(address)": FunctionFragment;
    "createCampaign(address,string,string,uint256,uint256)": FunctionFragment;
    "handle(uint32,bytes32,bytes)": FunctionFragment;
    "interchainGasPaymaster()": FunctionFragment;
    "interchainSecurityModule()": FunctionFragment;
    "isCharityEligible(address)": FunctionFragment;
    "mailbox()": FunctionFragment;
    "minimumAttestationScore()": FunctionFragment;
    "nextCampaignId()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setInterchainGasPaymaster(address)": FunctionFragment;
    "setInterchainSecurityModule(address)": FunctionFragment;
    "setMailbox(address)": FunctionFragment;
    "setMinimumAttestationScore(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCharityScore(address)": FunctionFragment;
    "usdc()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FINANCIAL_STATEMENTS_KEY"
      | "MISSION_STATEMENT_KEY"
      | "REGISTRATION_KEY"
      | "TAX_EXEMPT_STATUS_KEY"
      | "attestationStation"
      | "campaigns"
      | "charityScores"
      | "createCampaign"
      | "handle"
      | "interchainGasPaymaster"
      | "interchainSecurityModule"
      | "isCharityEligible"
      | "mailbox"
      | "minimumAttestationScore"
      | "nextCampaignId"
      | "owner"
      | "renounceOwnership"
      | "setInterchainGasPaymaster"
      | "setInterchainSecurityModule"
      | "setMailbox"
      | "setMinimumAttestationScore"
      | "transferOwnership"
      | "updateCharityScore"
      | "usdc"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FINANCIAL_STATEMENTS_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MISSION_STATEMENT_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTRATION_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TAX_EXEMPT_STATUS_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attestationStation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "charityScores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interchainGasPaymaster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interchainSecurityModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCharityEligible",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "mailbox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minimumAttestationScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setInterchainGasPaymaster",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterchainSecurityModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMailbox",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumAttestationScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCharityScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FINANCIAL_STATEMENTS_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MISSION_STATEMENT_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTRATION_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TAX_EXEMPT_STATUS_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestationStation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "charityScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interchainGasPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCharityEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mailbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumAttestationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterchainGasPaymaster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMailbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumAttestationScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCharityScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CampaignCreated(uint256,address,string,string,uint256,uint256)": EventFragment;
    "CampaignFunded(uint256,uint256)": EventFragment;
    "CharityEligibilityUpdated(address,bool)": EventFragment;
    "Donated(uint32,address,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "InterchainGasPaymasterSet(address)": EventFragment;
    "InterchainSecurityModuleSet(address)": EventFragment;
    "MailboxSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CampaignFunded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CharityEligibilityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InterchainGasPaymasterSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterchainSecurityModuleSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MailboxSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CampaignCreatedEventObject {
  campaignId: BigNumber;
  charity: string;
  title: string;
  description: string;
  targetAmount: BigNumber;
  deadline: BigNumber;
}
export type CampaignCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, BigNumber],
  CampaignCreatedEventObject
>;

export type CampaignCreatedEventFilter = TypedEventFilter<CampaignCreatedEvent>;

export interface CampaignFundedEventObject {
  campaignId: BigNumber;
  amount: BigNumber;
}
export type CampaignFundedEvent = TypedEvent<
  [BigNumber, BigNumber],
  CampaignFundedEventObject
>;

export type CampaignFundedEventFilter = TypedEventFilter<CampaignFundedEvent>;

export interface CharityEligibilityUpdatedEventObject {
  charity: string;
  eligible: boolean;
}
export type CharityEligibilityUpdatedEvent = TypedEvent<
  [string, boolean],
  CharityEligibilityUpdatedEventObject
>;

export type CharityEligibilityUpdatedEventFilter =
  TypedEventFilter<CharityEligibilityUpdatedEvent>;

export interface DonatedEventObject {
  origin: number;
  donor: string;
  campaignId: BigNumber;
  amount: BigNumber;
}
export type DonatedEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  DonatedEventObject
>;

export type DonatedEventFilter = TypedEventFilter<DonatedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface InterchainGasPaymasterSetEventObject {
  interchainGasPaymaster: string;
}
export type InterchainGasPaymasterSetEvent = TypedEvent<
  [string],
  InterchainGasPaymasterSetEventObject
>;

export type InterchainGasPaymasterSetEventFilter =
  TypedEventFilter<InterchainGasPaymasterSetEvent>;

export interface InterchainSecurityModuleSetEventObject {
  module: string;
}
export type InterchainSecurityModuleSetEvent = TypedEvent<
  [string],
  InterchainSecurityModuleSetEventObject
>;

export type InterchainSecurityModuleSetEventFilter =
  TypedEventFilter<InterchainSecurityModuleSetEvent>;

export interface MailboxSetEventObject {
  mailbox: string;
}
export type MailboxSetEvent = TypedEvent<[string], MailboxSetEventObject>;

export type MailboxSetEventFilter = TypedEventFilter<MailboxSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Multinate extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultinateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FINANCIAL_STATEMENTS_KEY(overrides?: CallOverrides): Promise<[string]>;

    MISSION_STATEMENT_KEY(overrides?: CallOverrides): Promise<[string]>;

    REGISTRATION_KEY(overrides?: CallOverrides): Promise<[string]>;

    TAX_EXEMPT_STATUS_KEY(overrides?: CallOverrides): Promise<[string]>;

    attestationStation(overrides?: CallOverrides): Promise<[string]>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        charity: string;
        title: string;
        description: string;
        targetAmount: BigNumber;
        currentAmount: BigNumber;
        deadline: BigNumber;
        active: boolean;
      }
    >;

    charityScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createCampaign(
      _charity: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _targetAmount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<[string]>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    isCharityEligible(
      _charity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    minimumAttestationScore(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextCampaignId(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the address of the application's InterchainGasPaymaster.
     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.
     */
    setInterchainGasPaymaster(
      _interchainGasPaymaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets the address of the application's Mailbox.
     * @param _mailbox The address of the Mailbox contract.
     */
    setMailbox(
      _mailbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumAttestationScore(
      _minimumAttestationScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCharityScore(
      _charity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FINANCIAL_STATEMENTS_KEY(overrides?: CallOverrides): Promise<string>;

  MISSION_STATEMENT_KEY(overrides?: CallOverrides): Promise<string>;

  REGISTRATION_KEY(overrides?: CallOverrides): Promise<string>;

  TAX_EXEMPT_STATUS_KEY(overrides?: CallOverrides): Promise<string>;

  attestationStation(overrides?: CallOverrides): Promise<string>;

  campaigns(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
      charity: string;
      title: string;
      description: string;
      targetAmount: BigNumber;
      currentAmount: BigNumber;
      deadline: BigNumber;
      active: boolean;
    }
  >;

  charityScores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createCampaign(
    _charity: PromiseOrValue<string>,
    _title: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    _targetAmount: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handle(
    _origin: PromiseOrValue<BigNumberish>,
    _sender: PromiseOrValue<BytesLike>,
    _message: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  isCharityEligible(
    _charity: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  minimumAttestationScore(overrides?: CallOverrides): Promise<BigNumber>;

  nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the address of the application's InterchainGasPaymaster.
   * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.
   */
  setInterchainGasPaymaster(
    _interchainGasPaymaster: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets the address of the application's Mailbox.
   * @param _mailbox The address of the Mailbox contract.
   */
  setMailbox(
    _mailbox: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumAttestationScore(
    _minimumAttestationScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCharityScore(
    _charity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _campaignId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FINANCIAL_STATEMENTS_KEY(overrides?: CallOverrides): Promise<string>;

    MISSION_STATEMENT_KEY(overrides?: CallOverrides): Promise<string>;

    REGISTRATION_KEY(overrides?: CallOverrides): Promise<string>;

    TAX_EXEMPT_STATUS_KEY(overrides?: CallOverrides): Promise<string>;

    attestationStation(overrides?: CallOverrides): Promise<string>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber, BigNumber, boolean] & {
        charity: string;
        title: string;
        description: string;
        targetAmount: BigNumber;
        currentAmount: BigNumber;
        deadline: BigNumber;
        active: boolean;
      }
    >;

    charityScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      _charity: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _targetAmount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<string>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    isCharityEligible(
      _charity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    minimumAttestationScore(overrides?: CallOverrides): Promise<BigNumber>;

    nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Sets the address of the application's InterchainGasPaymaster.
     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.
     */
    setInterchainGasPaymaster(
      _interchainGasPaymaster: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterchainSecurityModule(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets the address of the application's Mailbox.
     * @param _mailbox The address of the Mailbox contract.
     */
    setMailbox(
      _mailbox: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumAttestationScore(
      _minimumAttestationScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCharityScore(
      _charity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CampaignCreated(uint256,address,string,string,uint256,uint256)"(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      charity?: PromiseOrValue<string> | null,
      title?: null,
      description?: null,
      targetAmount?: null,
      deadline?: null
    ): CampaignCreatedEventFilter;
    CampaignCreated(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      charity?: PromiseOrValue<string> | null,
      title?: null,
      description?: null,
      targetAmount?: null,
      deadline?: null
    ): CampaignCreatedEventFilter;

    "CampaignFunded(uint256,uint256)"(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CampaignFundedEventFilter;
    CampaignFunded(
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): CampaignFundedEventFilter;

    "CharityEligibilityUpdated(address,bool)"(
      charity?: PromiseOrValue<string> | null,
      eligible?: null
    ): CharityEligibilityUpdatedEventFilter;
    CharityEligibilityUpdated(
      charity?: PromiseOrValue<string> | null,
      eligible?: null
    ): CharityEligibilityUpdatedEventFilter;

    "Donated(uint32,address,uint256,uint256)"(
      origin?: null,
      donor?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DonatedEventFilter;
    Donated(
      origin?: null,
      donor?: PromiseOrValue<string> | null,
      campaignId?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): DonatedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "InterchainGasPaymasterSet(address)"(
      interchainGasPaymaster?: PromiseOrValue<string> | null
    ): InterchainGasPaymasterSetEventFilter;
    InterchainGasPaymasterSet(
      interchainGasPaymaster?: PromiseOrValue<string> | null
    ): InterchainGasPaymasterSetEventFilter;

    "InterchainSecurityModuleSet(address)"(
      module?: PromiseOrValue<string> | null
    ): InterchainSecurityModuleSetEventFilter;
    InterchainSecurityModuleSet(
      module?: PromiseOrValue<string> | null
    ): InterchainSecurityModuleSetEventFilter;

    "MailboxSet(address)"(
      mailbox?: PromiseOrValue<string> | null
    ): MailboxSetEventFilter;
    MailboxSet(mailbox?: PromiseOrValue<string> | null): MailboxSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    FINANCIAL_STATEMENTS_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    MISSION_STATEMENT_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    REGISTRATION_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    TAX_EXEMPT_STATUS_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    attestationStation(overrides?: CallOverrides): Promise<BigNumber>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    charityScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCampaign(
      _charity: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _targetAmount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interchainGasPaymaster(overrides?: CallOverrides): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    isCharityEligible(
      _charity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    minimumAttestationScore(overrides?: CallOverrides): Promise<BigNumber>;

    nextCampaignId(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the address of the application's InterchainGasPaymaster.
     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.
     */
    setInterchainGasPaymaster(
      _interchainGasPaymaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Sets the address of the application's Mailbox.
     * @param _mailbox The address of the Mailbox contract.
     */
    setMailbox(
      _mailbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumAttestationScore(
      _minimumAttestationScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCharityScore(
      _charity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FINANCIAL_STATEMENTS_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MISSION_STATEMENT_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTRATION_KEY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TAX_EXEMPT_STATUS_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    attestationStation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaigns(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    charityScores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createCampaign(
      _charity: PromiseOrValue<string>,
      _title: PromiseOrValue<string>,
      _description: PromiseOrValue<string>,
      _targetAmount: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: PromiseOrValue<BigNumberish>,
      _sender: PromiseOrValue<BytesLike>,
      _message: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interchainGasPaymaster(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCharityEligible(
      _charity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumAttestationScore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextCampaignId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the address of the application's InterchainGasPaymaster.
     * @param _interchainGasPaymaster The address of the InterchainGasPaymaster contract.
     */
    setInterchainGasPaymaster(
      _interchainGasPaymaster: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the address of the application's Mailbox.
     * @param _mailbox The address of the Mailbox contract.
     */
    setMailbox(
      _mailbox: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumAttestationScore(
      _minimumAttestationScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCharityScore(
      _charity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _campaignId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
